#!/bin/ruby
# coding: utf-8

require 'oily_png'  # ubuntu package ruby-oily-png
require 'json' # ubuntu package ruby-zip
require 'zip'
require 'set'

require_relative "lib/job"
require_relative "lib/verbing"
require_relative "lib/match"
require_relative "lib/learn"
require_relative "lib/page"
require_relative "lib/freak"
require_relative "lib/fft"
require_relative "lib/estimate_scale"
require_relative "lib/image_util"
require_relative "lib/font"
require_relative "lib/fontconfig"
require_relative "lib/script"
require_relative "lib/pat"
require_relative "lib/fset"
require_relative "lib/correl"
require_relative "lib/clustering"
require_relative "lib/tempfile"
require_relative "lib/file_util"
require_relative "lib/tuning"
require_relative "lib/smp"
require_relative "lib/graphing"
require_relative "lib/estimate_image_params"
require_relative "lib/stat"
require_relative "lib/other_interpreters"
require_relative "lib/string_util"
require_relative "lib/array_util"
require_relative "lib/box"
require_relative "lib/reports"
require_relative "lib/svg"
require_relative "lib/pdf"
require_relative "lib/ttf"
require_relative "lib/test"

def main()
  start = Time.now

  if ARGV.length==0 then die("see README for usage") end

  if ARGV.length>1 or !(ARGV[0]=~/\.job$/)then
    verbing(ARGV)
    exit(0)
  end

  job_file = ARGV[0] # can be '-' for stdin
  job = Job.from_file(job_file)
  print "Parameters for this job:#{job}\n"

  report_dir = dir_and_file_to_path(job.output,"_reports")
  job.output = create_directories(job.output,report_dir)
  create_text_file(dir_and_file_to_path(job.output,"_this.job"),slurp_file(job_file)) # copy job file so we have a record of it
  if job.prev!=nil then
    prev_set = Fset.from_file_or_directory(job.prev)
    copy_all_pat_files(prev_set,job.output) # copy pat files from previous run; these may get overwritten later
  end

  page = Page.from_file(job.image) # handles extracting a page from a pdf, if that syntax was used
  job.image = page.png_filename
  page.analyze(job.spacing_multiple,job.guess_dpi,job.guess_font_size)

  run_job(job,page,report_dir)

  finish = Time.now
  print "Total time for this entire run = #{finish-start} seconds.\n"
end

def run_job(job,page,report_dir)
  if job.verb=='ocr' then
    # Fixme: should look at job.characters.
    #m = Match.new(characters:'h',meta_threshold:job.threshold)
    m = Match.new(scripts:['latin','greek'],meta_threshold:job.threshold)
    if job.set.nil? then die("job file doesn't contain a set parameter specifying a pattern set") end
    set = Fset.from_file_or_directory(job.set)
    m.execute(page,set,batch_code:Process.pid.to_s)
  end
  if job.verb=='learn' then
    pats = learn_pats(job,page,report_dir)
    write_svg_reports(job,report_dir,pats)
  end
end

def die(message)
  #  $stderr.print message,"\n"
  raise message # gives a stack trace
  exit(-1)
end

def warn(message)
  $stderr.print "****************************************************************************************************************\n"
  $stderr.print "              WARNING\n"
  $stderr.print message,"\n"
  $stderr.print "****************************************************************************************************************\n"
end

main()

